# coding: utf-8

"""
    HOPRd Rest API v2

    This Rest API enables developers to interact with a hoprd node programatically.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FundmultiBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'peer_id': 'str',
        'outgoing_amount': 'str',
        'incoming_amount': 'str'
    }

    attribute_map = {
        'peer_id': 'peerId',
        'outgoing_amount': 'outgoingAmount',
        'incoming_amount': 'incomingAmount'
    }

    def __init__(self, peer_id=None, outgoing_amount=None, incoming_amount=None):  # noqa: E501
        """FundmultiBody - a model defined in Swagger"""  # noqa: E501
        self._peer_id = None
        self._outgoing_amount = None
        self._incoming_amount = None
        self.discriminator = None
        self.peer_id = peer_id
        self.outgoing_amount = outgoing_amount
        self.incoming_amount = incoming_amount

    @property
    def peer_id(self):
        """Gets the peer_id of this FundmultiBody.  # noqa: E501

        PeerId to fund the outgoing/incoming channels with.  # noqa: E501

        :return: The peer_id of this FundmultiBody.  # noqa: E501
        :rtype: str
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this FundmultiBody.

        PeerId to fund the outgoing/incoming channels with.  # noqa: E501

        :param peer_id: The peer_id of this FundmultiBody.  # noqa: E501
        :type: str
        """
        if peer_id is None:
            raise ValueError("Invalid value for `peer_id`, must not be `None`")  # noqa: E501

        self._peer_id = peer_id

    @property
    def outgoing_amount(self):
        """Gets the outgoing_amount of this FundmultiBody.  # noqa: E501

        Amount of HOPR tokens to fund the outgoing channel (node -> counterparty). It will be used to pay for sending messages through channel  # noqa: E501

        :return: The outgoing_amount of this FundmultiBody.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_amount

    @outgoing_amount.setter
    def outgoing_amount(self, outgoing_amount):
        """Sets the outgoing_amount of this FundmultiBody.

        Amount of HOPR tokens to fund the outgoing channel (node -> counterparty). It will be used to pay for sending messages through channel  # noqa: E501

        :param outgoing_amount: The outgoing_amount of this FundmultiBody.  # noqa: E501
        :type: str
        """
        if outgoing_amount is None:
            raise ValueError("Invalid value for `outgoing_amount`, must not be `None`")  # noqa: E501

        self._outgoing_amount = outgoing_amount

    @property
    def incoming_amount(self):
        """Gets the incoming_amount of this FundmultiBody.  # noqa: E501

        Amount of HOPR tokens to fund the incoming channel (counterparty -> node). It will be used to pay for sending messages through channel  # noqa: E501

        :return: The incoming_amount of this FundmultiBody.  # noqa: E501
        :rtype: str
        """
        return self._incoming_amount

    @incoming_amount.setter
    def incoming_amount(self, incoming_amount):
        """Sets the incoming_amount of this FundmultiBody.

        Amount of HOPR tokens to fund the incoming channel (counterparty -> node). It will be used to pay for sending messages through channel  # noqa: E501

        :param incoming_amount: The incoming_amount of this FundmultiBody.  # noqa: E501
        :type: str
        """
        if incoming_amount is None:
            raise ValueError("Invalid value for `incoming_amount`, must not be `None`")  # noqa: E501

        self._incoming_amount = incoming_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundmultiBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundmultiBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
